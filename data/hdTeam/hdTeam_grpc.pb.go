// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: hdTeam.proto

package hdTeam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TabHDTeamService_CreateAssignmentRule_FullMethodName = "/TabHDTeamService/CreateAssignmentRule"
	TabHDTeamService_GetAssignmentRules_FullMethodName   = "/TabHDTeamService/GetAssignmentRules"
	TabHDTeamService_CreateTeamObject_FullMethodName     = "/TabHDTeamService/CreateTeamObject"
	TabHDTeamService_CreateTeamRecord_FullMethodName     = "/TabHDTeamService/CreateTeamRecord"
)

// TabHDTeamServiceClient is the client API for TabHDTeamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TabHDTeamServiceClient interface {
	CreateAssignmentRule(ctx context.Context, in *CreateAssignmentRuleRequest, opts ...grpc.CallOption) (*CreateAssignmentRuleResponse, error)
	GetAssignmentRules(ctx context.Context, in *GetAssignmentRuleRequest, opts ...grpc.CallOption) (*GetAssignmentRuleResponses, error)
	CreateTeamObject(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	CreateTeamRecord(ctx context.Context, in *CreateTeamRecordRequest, opts ...grpc.CallOption) (*CreateTeamRecordResponse, error)
}

type tabHDTeamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTabHDTeamServiceClient(cc grpc.ClientConnInterface) TabHDTeamServiceClient {
	return &tabHDTeamServiceClient{cc}
}

func (c *tabHDTeamServiceClient) CreateAssignmentRule(ctx context.Context, in *CreateAssignmentRuleRequest, opts ...grpc.CallOption) (*CreateAssignmentRuleResponse, error) {
	out := new(CreateAssignmentRuleResponse)
	err := c.cc.Invoke(ctx, TabHDTeamService_CreateAssignmentRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabHDTeamServiceClient) GetAssignmentRules(ctx context.Context, in *GetAssignmentRuleRequest, opts ...grpc.CallOption) (*GetAssignmentRuleResponses, error) {
	out := new(GetAssignmentRuleResponses)
	err := c.cc.Invoke(ctx, TabHDTeamService_GetAssignmentRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabHDTeamServiceClient) CreateTeamObject(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, TabHDTeamService_CreateTeamObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabHDTeamServiceClient) CreateTeamRecord(ctx context.Context, in *CreateTeamRecordRequest, opts ...grpc.CallOption) (*CreateTeamRecordResponse, error) {
	out := new(CreateTeamRecordResponse)
	err := c.cc.Invoke(ctx, TabHDTeamService_CreateTeamRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TabHDTeamServiceServer is the server API for TabHDTeamService service.
// All implementations must embed UnimplementedTabHDTeamServiceServer
// for forward compatibility
type TabHDTeamServiceServer interface {
	CreateAssignmentRule(context.Context, *CreateAssignmentRuleRequest) (*CreateAssignmentRuleResponse, error)
	GetAssignmentRules(context.Context, *GetAssignmentRuleRequest) (*GetAssignmentRuleResponses, error)
	CreateTeamObject(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	CreateTeamRecord(context.Context, *CreateTeamRecordRequest) (*CreateTeamRecordResponse, error)
	mustEmbedUnimplementedTabHDTeamServiceServer()
}

// UnimplementedTabHDTeamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTabHDTeamServiceServer struct {
}

func (UnimplementedTabHDTeamServiceServer) CreateAssignmentRule(context.Context, *CreateAssignmentRuleRequest) (*CreateAssignmentRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssignmentRule not implemented")
}
func (UnimplementedTabHDTeamServiceServer) GetAssignmentRules(context.Context, *GetAssignmentRuleRequest) (*GetAssignmentRuleResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignmentRules not implemented")
}
func (UnimplementedTabHDTeamServiceServer) CreateTeamObject(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamObject not implemented")
}
func (UnimplementedTabHDTeamServiceServer) CreateTeamRecord(context.Context, *CreateTeamRecordRequest) (*CreateTeamRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamRecord not implemented")
}
func (UnimplementedTabHDTeamServiceServer) mustEmbedUnimplementedTabHDTeamServiceServer() {}

// UnsafeTabHDTeamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TabHDTeamServiceServer will
// result in compilation errors.
type UnsafeTabHDTeamServiceServer interface {
	mustEmbedUnimplementedTabHDTeamServiceServer()
}

func RegisterTabHDTeamServiceServer(s grpc.ServiceRegistrar, srv TabHDTeamServiceServer) {
	s.RegisterService(&TabHDTeamService_ServiceDesc, srv)
}

func _TabHDTeamService_CreateAssignmentRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssignmentRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabHDTeamServiceServer).CreateAssignmentRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabHDTeamService_CreateAssignmentRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabHDTeamServiceServer).CreateAssignmentRule(ctx, req.(*CreateAssignmentRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabHDTeamService_GetAssignmentRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabHDTeamServiceServer).GetAssignmentRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabHDTeamService_GetAssignmentRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabHDTeamServiceServer).GetAssignmentRules(ctx, req.(*GetAssignmentRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabHDTeamService_CreateTeamObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabHDTeamServiceServer).CreateTeamObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabHDTeamService_CreateTeamObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabHDTeamServiceServer).CreateTeamObject(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabHDTeamService_CreateTeamRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabHDTeamServiceServer).CreateTeamRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabHDTeamService_CreateTeamRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabHDTeamServiceServer).CreateTeamRecord(ctx, req.(*CreateTeamRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TabHDTeamService_ServiceDesc is the grpc.ServiceDesc for TabHDTeamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TabHDTeamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TabHDTeamService",
	HandlerType: (*TabHDTeamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAssignmentRule",
			Handler:    _TabHDTeamService_CreateAssignmentRule_Handler,
		},
		{
			MethodName: "GetAssignmentRules",
			Handler:    _TabHDTeamService_GetAssignmentRules_Handler,
		},
		{
			MethodName: "CreateTeamObject",
			Handler:    _TabHDTeamService_CreateTeamObject_Handler,
		},
		{
			MethodName: "CreateTeamRecord",
			Handler:    _TabHDTeamService_CreateTeamRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hdTeam.proto",
}
