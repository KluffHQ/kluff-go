// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: hdArticle.proto

package hdArtcile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TabHDArticleService_AddFeedback_FullMethodName         = "/TabHDArticleService/AddFeedback"
	TabHDArticleService_IncrementView_FullMethodName       = "/TabHDArticleService/IncrementView"
	TabHDArticleService_CreateArticleObject_FullMethodName = "/TabHDArticleService/CreateArticleObject"
	TabHDArticleService_CreateArticleRecord_FullMethodName = "/TabHDArticleService/CreateArticleRecord"
)

// TabHDArticleServiceClient is the client API for TabHDArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TabHDArticleServiceClient interface {
	AddFeedback(ctx context.Context, in *AddFeedbackRequest, opts ...grpc.CallOption) (*AddFeedbackResponse, error)
	IncrementView(ctx context.Context, in *IncrementViewRequest, opts ...grpc.CallOption) (*IncrementViewResponse, error)
	CreateArticleObject(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleResponse, error)
	CreateArticleRecord(ctx context.Context, in *CreateArticleRecordRequest, opts ...grpc.CallOption) (*CreateArticleRecordResponse, error)
}

type tabHDArticleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTabHDArticleServiceClient(cc grpc.ClientConnInterface) TabHDArticleServiceClient {
	return &tabHDArticleServiceClient{cc}
}

func (c *tabHDArticleServiceClient) AddFeedback(ctx context.Context, in *AddFeedbackRequest, opts ...grpc.CallOption) (*AddFeedbackResponse, error) {
	out := new(AddFeedbackResponse)
	err := c.cc.Invoke(ctx, TabHDArticleService_AddFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabHDArticleServiceClient) IncrementView(ctx context.Context, in *IncrementViewRequest, opts ...grpc.CallOption) (*IncrementViewResponse, error) {
	out := new(IncrementViewResponse)
	err := c.cc.Invoke(ctx, TabHDArticleService_IncrementView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabHDArticleServiceClient) CreateArticleObject(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleResponse, error) {
	out := new(CreateArticleResponse)
	err := c.cc.Invoke(ctx, TabHDArticleService_CreateArticleObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabHDArticleServiceClient) CreateArticleRecord(ctx context.Context, in *CreateArticleRecordRequest, opts ...grpc.CallOption) (*CreateArticleRecordResponse, error) {
	out := new(CreateArticleRecordResponse)
	err := c.cc.Invoke(ctx, TabHDArticleService_CreateArticleRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TabHDArticleServiceServer is the server API for TabHDArticleService service.
// All implementations must embed UnimplementedTabHDArticleServiceServer
// for forward compatibility
type TabHDArticleServiceServer interface {
	AddFeedback(context.Context, *AddFeedbackRequest) (*AddFeedbackResponse, error)
	IncrementView(context.Context, *IncrementViewRequest) (*IncrementViewResponse, error)
	CreateArticleObject(context.Context, *CreateArticleRequest) (*CreateArticleResponse, error)
	CreateArticleRecord(context.Context, *CreateArticleRecordRequest) (*CreateArticleRecordResponse, error)
	mustEmbedUnimplementedTabHDArticleServiceServer()
}

// UnimplementedTabHDArticleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTabHDArticleServiceServer struct {
}

func (UnimplementedTabHDArticleServiceServer) AddFeedback(context.Context, *AddFeedbackRequest) (*AddFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeedback not implemented")
}
func (UnimplementedTabHDArticleServiceServer) IncrementView(context.Context, *IncrementViewRequest) (*IncrementViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementView not implemented")
}
func (UnimplementedTabHDArticleServiceServer) CreateArticleObject(context.Context, *CreateArticleRequest) (*CreateArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticleObject not implemented")
}
func (UnimplementedTabHDArticleServiceServer) CreateArticleRecord(context.Context, *CreateArticleRecordRequest) (*CreateArticleRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticleRecord not implemented")
}
func (UnimplementedTabHDArticleServiceServer) mustEmbedUnimplementedTabHDArticleServiceServer() {}

// UnsafeTabHDArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TabHDArticleServiceServer will
// result in compilation errors.
type UnsafeTabHDArticleServiceServer interface {
	mustEmbedUnimplementedTabHDArticleServiceServer()
}

func RegisterTabHDArticleServiceServer(s grpc.ServiceRegistrar, srv TabHDArticleServiceServer) {
	s.RegisterService(&TabHDArticleService_ServiceDesc, srv)
}

func _TabHDArticleService_AddFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabHDArticleServiceServer).AddFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabHDArticleService_AddFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabHDArticleServiceServer).AddFeedback(ctx, req.(*AddFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabHDArticleService_IncrementView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabHDArticleServiceServer).IncrementView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabHDArticleService_IncrementView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabHDArticleServiceServer).IncrementView(ctx, req.(*IncrementViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabHDArticleService_CreateArticleObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabHDArticleServiceServer).CreateArticleObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabHDArticleService_CreateArticleObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabHDArticleServiceServer).CreateArticleObject(ctx, req.(*CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabHDArticleService_CreateArticleRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabHDArticleServiceServer).CreateArticleRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TabHDArticleService_CreateArticleRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabHDArticleServiceServer).CreateArticleRecord(ctx, req.(*CreateArticleRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TabHDArticleService_ServiceDesc is the grpc.ServiceDesc for TabHDArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TabHDArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TabHDArticleService",
	HandlerType: (*TabHDArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFeedback",
			Handler:    _TabHDArticleService_AddFeedback_Handler,
		},
		{
			MethodName: "IncrementView",
			Handler:    _TabHDArticleService_IncrementView_Handler,
		},
		{
			MethodName: "CreateArticleObject",
			Handler:    _TabHDArticleService_CreateArticleObject_Handler,
		},
		{
			MethodName: "CreateArticleRecord",
			Handler:    _TabHDArticleService_CreateArticleRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hdArticle.proto",
}
