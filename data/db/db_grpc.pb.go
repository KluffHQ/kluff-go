// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: db.proto

package db

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DbClient is the client API for Db service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbClient interface {
	SendPing(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	CreateObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Empty, error)
	AddObjectFields(ctx context.Context, in *ObjectFieldParam, opts ...grpc.CallOption) (*Data, error)
	GetObjects(ctx context.Context, in *ObjectQuery, opts ...grpc.CallOption) (*Data, error)
	UpdateObjectMeta(ctx context.Context, in *ObjectMeta, opts ...grpc.CallOption) (*Empty, error)
	DeleteObject(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	DeleteFields(ctx context.Context, in *DeleteField, opts ...grpc.CallOption) (*Empty, error)
	UpdateObjectField(ctx context.Context, in *UpdateField, opts ...grpc.CallOption) (*Empty, error)
	GetObjectSchema(ctx context.Context, in *String, opts ...grpc.CallOption) (*Data, error)
	ObjectExists(ctx context.Context, in *String, opts ...grpc.CallOption) (*Bool, error)
	CreateRecord(ctx context.Context, in *CreateRecordParam, opts ...grpc.CallOption) (*Data, error)
	GetRecord(ctx context.Context, in *RecordQuery, opts ...grpc.CallOption) (*Data, error)
	UpdateARecord(ctx context.Context, in *UpdateRecord, opts ...grpc.CallOption) (*Empty, error)
	DeleteARecord(ctx context.Context, in *DeleteRecord, opts ...grpc.CallOption) (*Empty, error)
	GetAllRecords(ctx context.Context, in *RecordQuery, opts ...grpc.CallOption) (*Data, error)
	GetFields(ctx context.Context, in *String, opts ...grpc.CallOption) (*Data, error)
}

type dbClient struct {
	cc grpc.ClientConnInterface
}

func NewDbClient(cc grpc.ClientConnInterface) DbClient {
	return &dbClient{cc}
}

func (c *dbClient) SendPing(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/db.db/SendPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) CreateObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/db.db/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) AddObjectFields(ctx context.Context, in *ObjectFieldParam, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/db.db/AddObjectFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) GetObjects(ctx context.Context, in *ObjectQuery, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/db.db/GetObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) UpdateObjectMeta(ctx context.Context, in *ObjectMeta, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/db.db/UpdateObjectMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) DeleteObject(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/db.db/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) DeleteFields(ctx context.Context, in *DeleteField, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/db.db/DeleteFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) UpdateObjectField(ctx context.Context, in *UpdateField, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/db.db/UpdateObjectField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) GetObjectSchema(ctx context.Context, in *String, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/db.db/GetObjectSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) ObjectExists(ctx context.Context, in *String, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/db.db/ObjectExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) CreateRecord(ctx context.Context, in *CreateRecordParam, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/db.db/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) GetRecord(ctx context.Context, in *RecordQuery, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/db.db/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) UpdateARecord(ctx context.Context, in *UpdateRecord, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/db.db/UpdateARecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) DeleteARecord(ctx context.Context, in *DeleteRecord, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/db.db/DeleteARecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) GetAllRecords(ctx context.Context, in *RecordQuery, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/db.db/GetAllRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) GetFields(ctx context.Context, in *String, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/db.db/GetFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbServer is the server API for Db service.
// All implementations must embed UnimplementedDbServer
// for forward compatibility
type DbServer interface {
	SendPing(context.Context, *Ping) (*Pong, error)
	CreateObject(context.Context, *Object) (*Empty, error)
	AddObjectFields(context.Context, *ObjectFieldParam) (*Data, error)
	GetObjects(context.Context, *ObjectQuery) (*Data, error)
	UpdateObjectMeta(context.Context, *ObjectMeta) (*Empty, error)
	DeleteObject(context.Context, *String) (*Empty, error)
	DeleteFields(context.Context, *DeleteField) (*Empty, error)
	UpdateObjectField(context.Context, *UpdateField) (*Empty, error)
	GetObjectSchema(context.Context, *String) (*Data, error)
	ObjectExists(context.Context, *String) (*Bool, error)
	CreateRecord(context.Context, *CreateRecordParam) (*Data, error)
	GetRecord(context.Context, *RecordQuery) (*Data, error)
	UpdateARecord(context.Context, *UpdateRecord) (*Empty, error)
	DeleteARecord(context.Context, *DeleteRecord) (*Empty, error)
	GetAllRecords(context.Context, *RecordQuery) (*Data, error)
	GetFields(context.Context, *String) (*Data, error)
	mustEmbedUnimplementedDbServer()
}

// UnimplementedDbServer must be embedded to have forward compatible implementations.
type UnimplementedDbServer struct {
}

func (UnimplementedDbServer) SendPing(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPing not implemented")
}
func (UnimplementedDbServer) CreateObject(context.Context, *Object) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedDbServer) AddObjectFields(context.Context, *ObjectFieldParam) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObjectFields not implemented")
}
func (UnimplementedDbServer) GetObjects(context.Context, *ObjectQuery) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjects not implemented")
}
func (UnimplementedDbServer) UpdateObjectMeta(context.Context, *ObjectMeta) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectMeta not implemented")
}
func (UnimplementedDbServer) DeleteObject(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedDbServer) DeleteFields(context.Context, *DeleteField) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFields not implemented")
}
func (UnimplementedDbServer) UpdateObjectField(context.Context, *UpdateField) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectField not implemented")
}
func (UnimplementedDbServer) GetObjectSchema(context.Context, *String) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectSchema not implemented")
}
func (UnimplementedDbServer) ObjectExists(context.Context, *String) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectExists not implemented")
}
func (UnimplementedDbServer) CreateRecord(context.Context, *CreateRecordParam) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedDbServer) GetRecord(context.Context, *RecordQuery) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedDbServer) UpdateARecord(context.Context, *UpdateRecord) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateARecord not implemented")
}
func (UnimplementedDbServer) DeleteARecord(context.Context, *DeleteRecord) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteARecord not implemented")
}
func (UnimplementedDbServer) GetAllRecords(context.Context, *RecordQuery) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRecords not implemented")
}
func (UnimplementedDbServer) GetFields(context.Context, *String) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFields not implemented")
}
func (UnimplementedDbServer) mustEmbedUnimplementedDbServer() {}

// UnsafeDbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbServer will
// result in compilation errors.
type UnsafeDbServer interface {
	mustEmbedUnimplementedDbServer()
}

func RegisterDbServer(s grpc.ServiceRegistrar, srv DbServer) {
	s.RegisterService(&Db_ServiceDesc, srv)
}

func _Db_SendPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).SendPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/SendPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).SendPing(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).CreateObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_AddObjectFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectFieldParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).AddObjectFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/AddObjectFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).AddObjectFields(ctx, req.(*ObjectFieldParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_GetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).GetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/GetObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).GetObjects(ctx, req.(*ObjectQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_UpdateObjectMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).UpdateObjectMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/UpdateObjectMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).UpdateObjectMeta(ctx, req.(*ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).DeleteObject(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DeleteFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).DeleteFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/DeleteFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).DeleteFields(ctx, req.(*DeleteField))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_UpdateObjectField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).UpdateObjectField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/UpdateObjectField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).UpdateObjectField(ctx, req.(*UpdateField))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_GetObjectSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).GetObjectSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/GetObjectSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).GetObjectSchema(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_ObjectExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).ObjectExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/ObjectExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).ObjectExists(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).CreateRecord(ctx, req.(*CreateRecordParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).GetRecord(ctx, req.(*RecordQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_UpdateARecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).UpdateARecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/UpdateARecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).UpdateARecord(ctx, req.(*UpdateRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_DeleteARecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).DeleteARecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/DeleteARecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).DeleteARecord(ctx, req.(*DeleteRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_GetAllRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).GetAllRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/GetAllRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).GetAllRecords(ctx, req.(*RecordQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_GetFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).GetFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.db/GetFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).GetFields(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

// Db_ServiceDesc is the grpc.ServiceDesc for Db service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db.db",
	HandlerType: (*DbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPing",
			Handler:    _Db_SendPing_Handler,
		},
		{
			MethodName: "CreateObject",
			Handler:    _Db_CreateObject_Handler,
		},
		{
			MethodName: "AddObjectFields",
			Handler:    _Db_AddObjectFields_Handler,
		},
		{
			MethodName: "GetObjects",
			Handler:    _Db_GetObjects_Handler,
		},
		{
			MethodName: "UpdateObjectMeta",
			Handler:    _Db_UpdateObjectMeta_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Db_DeleteObject_Handler,
		},
		{
			MethodName: "DeleteFields",
			Handler:    _Db_DeleteFields_Handler,
		},
		{
			MethodName: "UpdateObjectField",
			Handler:    _Db_UpdateObjectField_Handler,
		},
		{
			MethodName: "GetObjectSchema",
			Handler:    _Db_GetObjectSchema_Handler,
		},
		{
			MethodName: "ObjectExists",
			Handler:    _Db_ObjectExists_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _Db_CreateRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _Db_GetRecord_Handler,
		},
		{
			MethodName: "UpdateARecord",
			Handler:    _Db_UpdateARecord_Handler,
		},
		{
			MethodName: "DeleteARecord",
			Handler:    _Db_DeleteARecord_Handler,
		},
		{
			MethodName: "GetAllRecords",
			Handler:    _Db_GetAllRecords_Handler,
		},
		{
			MethodName: "GetFields",
			Handler:    _Db_GetFields_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}
