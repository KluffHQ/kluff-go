// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: crm.proto

package crm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Activities_GetOpenActivities_FullMethodName = "/crm.Activities/GetOpenActivities"
)

// ActivitiesClient is the client API for Activities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivitiesClient interface {
	GetOpenActivities(ctx context.Context, in *OpenActivitiesRequest, opts ...grpc.CallOption) (*OpenActivitiesResponse, error)
}

type activitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewActivitiesClient(cc grpc.ClientConnInterface) ActivitiesClient {
	return &activitiesClient{cc}
}

func (c *activitiesClient) GetOpenActivities(ctx context.Context, in *OpenActivitiesRequest, opts ...grpc.CallOption) (*OpenActivitiesResponse, error) {
	out := new(OpenActivitiesResponse)
	err := c.cc.Invoke(ctx, Activities_GetOpenActivities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivitiesServer is the server API for Activities service.
// All implementations must embed UnimplementedActivitiesServer
// for forward compatibility
type ActivitiesServer interface {
	GetOpenActivities(context.Context, *OpenActivitiesRequest) (*OpenActivitiesResponse, error)
	mustEmbedUnimplementedActivitiesServer()
}

// UnimplementedActivitiesServer must be embedded to have forward compatible implementations.
type UnimplementedActivitiesServer struct {
}

func (UnimplementedActivitiesServer) GetOpenActivities(context.Context, *OpenActivitiesRequest) (*OpenActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenActivities not implemented")
}
func (UnimplementedActivitiesServer) mustEmbedUnimplementedActivitiesServer() {}

// UnsafeActivitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivitiesServer will
// result in compilation errors.
type UnsafeActivitiesServer interface {
	mustEmbedUnimplementedActivitiesServer()
}

func RegisterActivitiesServer(s grpc.ServiceRegistrar, srv ActivitiesServer) {
	s.RegisterService(&Activities_ServiceDesc, srv)
}

func _Activities_GetOpenActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivitiesServer).GetOpenActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Activities_GetOpenActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivitiesServer).GetOpenActivities(ctx, req.(*OpenActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Activities_ServiceDesc is the grpc.ServiceDesc for Activities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Activities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crm.Activities",
	HandlerType: (*ActivitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOpenActivities",
			Handler:    _Activities_GetOpenActivities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crm.proto",
}
