// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: ticket.proto

package hd_ticket

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TabTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                          int64                `protobuf:"varint,1,opt,name=name,proto3" json:"name,omitempty"`
	Creation                      *timestamp.Timestamp `protobuf:"bytes,2,opt,name=creation,proto3" json:"creation,omitempty"`
	Modified                      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=modified,proto3" json:"modified,omitempty"`
	ModifiedBy                    string               `protobuf:"bytes,4,opt,name=modified_by,json=modifiedBy,proto3" json:"modified_by,omitempty"`
	Owner                         string               `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Docstatus                     int32                `protobuf:"varint,6,opt,name=docstatus,proto3" json:"docstatus,omitempty"`
	Idx                           int32                `protobuf:"varint,7,opt,name=idx,proto3" json:"idx,omitempty"`
	Subject                       string               `protobuf:"bytes,8,opt,name=subject,proto3" json:"subject,omitempty"`
	RaisedBy                      string               `protobuf:"bytes,9,opt,name=raised_by,json=raisedBy,proto3" json:"raised_by,omitempty"`
	Status                        string               `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	Priority                      string               `protobuf:"bytes,11,opt,name=priority,proto3" json:"priority,omitempty"`
	TicketType                    string               `protobuf:"bytes,12,opt,name=ticket_type,json=ticketType,proto3" json:"ticket_type,omitempty"`
	AgentGroup                    string               `protobuf:"bytes,13,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
	TicketSplitFrom               string               `protobuf:"bytes,14,opt,name=ticket_split_from,json=ticketSplitFrom,proto3" json:"ticket_split_from,omitempty"`
	Description                   string               `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"` // Assuming longtext translates to a string in protobuf
	Template                      string               `protobuf:"bytes,16,opt,name=template,proto3" json:"template,omitempty"`
	Sla                           string               `protobuf:"bytes,17,opt,name=sla,proto3" json:"sla,omitempty"`
	ResponseBy                    *timestamp.Timestamp `protobuf:"bytes,18,opt,name=response_by,json=responseBy,proto3" json:"response_by,omitempty"`
	AgreementStatus               string               `protobuf:"bytes,19,opt,name=agreement_status,json=agreementStatus,proto3" json:"agreement_status,omitempty"`
	ResolutionBy                  *timestamp.Timestamp `protobuf:"bytes,20,opt,name=resolution_by,json=resolutionBy,proto3" json:"resolution_by,omitempty"`
	ServiceLevelAgreementCreation *timestamp.Timestamp `protobuf:"bytes,21,opt,name=service_level_agreement_creation,json=serviceLevelAgreementCreation,proto3" json:"service_level_agreement_creation,omitempty"`
	OnHoldSince                   *timestamp.Timestamp `protobuf:"bytes,22,opt,name=on_hold_since,json=onHoldSince,proto3" json:"on_hold_since,omitempty"`
	TotalHoldTime                 float64              `protobuf:"fixed64,23,opt,name=total_hold_time,json=totalHoldTime,proto3" json:"total_hold_time,omitempty"` // Assuming that decimal(21,9) can be represented by double in protobuf
	FirstResponseTime             float64              `protobuf:"fixed64,24,opt,name=first_response_time,json=firstResponseTime,proto3" json:"first_response_time,omitempty"`
	FirstRespondedOn              *timestamp.Timestamp `protobuf:"bytes,25,opt,name=first_responded_on,json=firstRespondedOn,proto3" json:"first_responded_on,omitempty"`
	AvgResponseTime               float64              `protobuf:"fixed64,26,opt,name=avg_response_time,json=avgResponseTime,proto3" json:"avg_response_time,omitempty"`
	ResolutionDetails             string               `protobuf:"bytes,27,opt,name=resolution_details,json=resolutionDetails,proto3" json:"resolution_details,omitempty"` // Assuming longtext translates to a string in protobuf
	OpeningDate                   *timestamp.Timestamp `protobuf:"bytes,28,opt,name=opening_date,json=openingDate,proto3" json:"opening_date,omitempty"`
	OpeningTime                   *timestamp.Timestamp `protobuf:"bytes,29,opt,name=opening_time,json=openingTime,proto3" json:"opening_time,omitempty"`
	ResolutionDate                *timestamp.Timestamp `protobuf:"bytes,30,opt,name=resolution_date,json=resolutionDate,proto3" json:"resolution_date,omitempty"`
	ResolutionTime                float64              `protobuf:"fixed64,31,opt,name=resolution_time,json=resolutionTime,proto3" json:"resolution_time,omitempty"`
	UserResolutionTime            float64              `protobuf:"fixed64,32,opt,name=user_resolution_time,json=userResolutionTime,proto3" json:"user_resolution_time,omitempty"`
	Contact                       string               `protobuf:"bytes,33,opt,name=contact,proto3" json:"contact,omitempty"`
	Customer                      string               `protobuf:"bytes,34,opt,name=customer,proto3" json:"customer,omitempty"`
	EmailAccount                  string               `protobuf:"bytes,35,opt,name=email_account,json=emailAccount,proto3" json:"email_account,omitempty"`
	ViaCustomerPortal             int32                `protobuf:"varint,36,opt,name=via_customer_portal,json=viaCustomerPortal,proto3" json:"via_customer_portal,omitempty"`
	Attachment                    []string             `protobuf:"bytes,37,rep,name=attachment,proto3" json:"attachment,omitempty"`
	ContentType                   string               `protobuf:"bytes,38,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Feedback                      string               `protobuf:"bytes,39,opt,name=feedback,proto3" json:"feedback,omitempty"`
	FeedbackExtra                 string               `protobuf:"bytes,40,opt,name=feedback_extra,json=feedbackExtra,proto3" json:"feedback_extra,omitempty"` // Assuming longtext translates to a string in protobuf
	UserTags                      string               `protobuf:"bytes,41,opt,name=user_tags,json=userTags,proto3" json:"user_tags,omitempty"`
	Comments                      string               `protobuf:"bytes,42,opt,name=comments,proto3" json:"comments,omitempty"`
	Assign                        string               `protobuf:"bytes,43,opt,name=assign,proto3" json:"assign,omitempty"`
	LikedBy                       string               `protobuf:"bytes,44,opt,name=liked_by,json=likedBy,proto3" json:"liked_by,omitempty"`
	Seen                          string               `protobuf:"bytes,45,opt,name=seen,proto3" json:"seen,omitempty"`
}

func (x *TabTicket) Reset() {
	*x = TabTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabTicket) ProtoMessage() {}

func (x *TabTicket) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabTicket.ProtoReflect.Descriptor instead.
func (*TabTicket) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *TabTicket) GetName() int64 {
	if x != nil {
		return x.Name
	}
	return 0
}

func (x *TabTicket) GetCreation() *timestamp.Timestamp {
	if x != nil {
		return x.Creation
	}
	return nil
}

func (x *TabTicket) GetModified() *timestamp.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *TabTicket) GetModifiedBy() string {
	if x != nil {
		return x.ModifiedBy
	}
	return ""
}

func (x *TabTicket) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TabTicket) GetDocstatus() int32 {
	if x != nil {
		return x.Docstatus
	}
	return 0
}

func (x *TabTicket) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *TabTicket) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *TabTicket) GetRaisedBy() string {
	if x != nil {
		return x.RaisedBy
	}
	return ""
}

func (x *TabTicket) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TabTicket) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *TabTicket) GetTicketType() string {
	if x != nil {
		return x.TicketType
	}
	return ""
}

func (x *TabTicket) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

func (x *TabTicket) GetTicketSplitFrom() string {
	if x != nil {
		return x.TicketSplitFrom
	}
	return ""
}

func (x *TabTicket) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TabTicket) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *TabTicket) GetSla() string {
	if x != nil {
		return x.Sla
	}
	return ""
}

func (x *TabTicket) GetResponseBy() *timestamp.Timestamp {
	if x != nil {
		return x.ResponseBy
	}
	return nil
}

func (x *TabTicket) GetAgreementStatus() string {
	if x != nil {
		return x.AgreementStatus
	}
	return ""
}

func (x *TabTicket) GetResolutionBy() *timestamp.Timestamp {
	if x != nil {
		return x.ResolutionBy
	}
	return nil
}

func (x *TabTicket) GetServiceLevelAgreementCreation() *timestamp.Timestamp {
	if x != nil {
		return x.ServiceLevelAgreementCreation
	}
	return nil
}

func (x *TabTicket) GetOnHoldSince() *timestamp.Timestamp {
	if x != nil {
		return x.OnHoldSince
	}
	return nil
}

func (x *TabTicket) GetTotalHoldTime() float64 {
	if x != nil {
		return x.TotalHoldTime
	}
	return 0
}

func (x *TabTicket) GetFirstResponseTime() float64 {
	if x != nil {
		return x.FirstResponseTime
	}
	return 0
}

func (x *TabTicket) GetFirstRespondedOn() *timestamp.Timestamp {
	if x != nil {
		return x.FirstRespondedOn
	}
	return nil
}

func (x *TabTicket) GetAvgResponseTime() float64 {
	if x != nil {
		return x.AvgResponseTime
	}
	return 0
}

func (x *TabTicket) GetResolutionDetails() string {
	if x != nil {
		return x.ResolutionDetails
	}
	return ""
}

func (x *TabTicket) GetOpeningDate() *timestamp.Timestamp {
	if x != nil {
		return x.OpeningDate
	}
	return nil
}

func (x *TabTicket) GetOpeningTime() *timestamp.Timestamp {
	if x != nil {
		return x.OpeningTime
	}
	return nil
}

func (x *TabTicket) GetResolutionDate() *timestamp.Timestamp {
	if x != nil {
		return x.ResolutionDate
	}
	return nil
}

func (x *TabTicket) GetResolutionTime() float64 {
	if x != nil {
		return x.ResolutionTime
	}
	return 0
}

func (x *TabTicket) GetUserResolutionTime() float64 {
	if x != nil {
		return x.UserResolutionTime
	}
	return 0
}

func (x *TabTicket) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *TabTicket) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *TabTicket) GetEmailAccount() string {
	if x != nil {
		return x.EmailAccount
	}
	return ""
}

func (x *TabTicket) GetViaCustomerPortal() int32 {
	if x != nil {
		return x.ViaCustomerPortal
	}
	return 0
}

func (x *TabTicket) GetAttachment() []string {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *TabTicket) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TabTicket) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

func (x *TabTicket) GetFeedbackExtra() string {
	if x != nil {
		return x.FeedbackExtra
	}
	return ""
}

func (x *TabTicket) GetUserTags() string {
	if x != nil {
		return x.UserTags
	}
	return ""
}

func (x *TabTicket) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *TabTicket) GetAssign() string {
	if x != nil {
		return x.Assign
	}
	return ""
}

func (x *TabTicket) GetLikedBy() string {
	if x != nil {
		return x.LikedBy
	}
	return ""
}

func (x *TabTicket) GetSeen() string {
	if x != nil {
		return x.Seen
	}
	return ""
}

type CreateNewTicketTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateNewTicketTableRequest) Reset() {
	*x = CreateNewTicketTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewTicketTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewTicketTableRequest) ProtoMessage() {}

func (x *CreateNewTicketTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewTicketTableRequest.ProtoReflect.Descriptor instead.
func (*CreateNewTicketTableRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{1}
}

type CreateNewTicketTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateNewTicketTableResponse) Reset() {
	*x = CreateNewTicketTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewTicketTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewTicketTableResponse) ProtoMessage() {}

func (x *CreateNewTicketTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewTicketTableResponse.ProtoReflect.Descriptor instead.
func (*CreateNewTicketTableResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{2}
}

func (x *CreateNewTicketTableResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTicketRequest) Reset() {
	*x = GetTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketRequest) ProtoMessage() {}

func (x *GetTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketRequest.ProtoReflect.Descriptor instead.
func (*GetTicketRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{3}
}

func (x *GetTicketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabTicket *TabTicket `protobuf:"bytes,1,opt,name=tabTicket,proto3" json:"tabTicket,omitempty"`
}

func (x *GetTicketResponse) Reset() {
	*x = GetTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTicketResponse) ProtoMessage() {}

func (x *GetTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTicketResponse.ProtoReflect.Descriptor instead.
func (*GetTicketResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{4}
}

func (x *GetTicketResponse) GetTabTicket() *TabTicket {
	if x != nil {
		return x.TabTicket
	}
	return nil
}

type CreateTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabTicket *TabTicket `protobuf:"bytes,1,opt,name=tabTicket,proto3" json:"tabTicket,omitempty"`
}

func (x *CreateTicketRequest) Reset() {
	*x = CreateTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketRequest) ProtoMessage() {}

func (x *CreateTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketRequest.ProtoReflect.Descriptor instead.
func (*CreateTicketRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTicketRequest) GetTabTicket() *TabTicket {
	if x != nil {
		return x.TabTicket
	}
	return nil
}

type CreateTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTicketResponse) Reset() {
	*x = CreateTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTicketResponse) ProtoMessage() {}

func (x *CreateTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTicketResponse.ProtoReflect.Descriptor instead.
func (*CreateTicketResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTicketResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateTicketResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_ticket_proto protoreflect.FileDescriptor

var file_ticket_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x99, 0x0e, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x6f, 0x63,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x6c, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6c,
	0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x12, 0x29,
	0x0a, 0x10, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x63, 0x0a, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x0d, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48,
	0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x4f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x76,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x69, 0x61, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x76, 0x69, 0x61, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x69, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x69, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x74,
	0x61, 0x62, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x54, 0x61, 0x62, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x74, 0x61, 0x62, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x3f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09,
	0x74, 0x61, 0x62, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x54, 0x61, 0x62, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x3e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xe0, 0x01, 0x0a, 0x12, 0x48, 0x44, 0x54, 0x61, 0x62,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x68, 0x64,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ticket_proto_rawDescOnce sync.Once
	file_ticket_proto_rawDescData = file_ticket_proto_rawDesc
)

func file_ticket_proto_rawDescGZIP() []byte {
	file_ticket_proto_rawDescOnce.Do(func() {
		file_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(file_ticket_proto_rawDescData)
	})
	return file_ticket_proto_rawDescData
}

var file_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ticket_proto_goTypes = []interface{}{
	(*TabTicket)(nil),                    // 0: TabTicket
	(*CreateNewTicketTableRequest)(nil),  // 1: CreateNewTicketTableRequest
	(*CreateNewTicketTableResponse)(nil), // 2: CreateNewTicketTableResponse
	(*GetTicketRequest)(nil),             // 3: GetTicketRequest
	(*GetTicketResponse)(nil),            // 4: GetTicketResponse
	(*CreateTicketRequest)(nil),          // 5: CreateTicketRequest
	(*CreateTicketResponse)(nil),         // 6: CreateTicketResponse
	(*timestamp.Timestamp)(nil),          // 7: google.protobuf.Timestamp
}
var file_ticket_proto_depIdxs = []int32{
	7,  // 0: TabTicket.creation:type_name -> google.protobuf.Timestamp
	7,  // 1: TabTicket.modified:type_name -> google.protobuf.Timestamp
	7,  // 2: TabTicket.response_by:type_name -> google.protobuf.Timestamp
	7,  // 3: TabTicket.resolution_by:type_name -> google.protobuf.Timestamp
	7,  // 4: TabTicket.service_level_agreement_creation:type_name -> google.protobuf.Timestamp
	7,  // 5: TabTicket.on_hold_since:type_name -> google.protobuf.Timestamp
	7,  // 6: TabTicket.first_responded_on:type_name -> google.protobuf.Timestamp
	7,  // 7: TabTicket.opening_date:type_name -> google.protobuf.Timestamp
	7,  // 8: TabTicket.opening_time:type_name -> google.protobuf.Timestamp
	7,  // 9: TabTicket.resolution_date:type_name -> google.protobuf.Timestamp
	0,  // 10: GetTicketResponse.tabTicket:type_name -> TabTicket
	0,  // 11: CreateTicketRequest.tabTicket:type_name -> TabTicket
	1,  // 12: HDTabTicketService.CreateNewTicketTable:input_type -> CreateNewTicketTableRequest
	5,  // 13: HDTabTicketService.CreateTicket:input_type -> CreateTicketRequest
	3,  // 14: HDTabTicketService.GetTicket:input_type -> GetTicketRequest
	2,  // 15: HDTabTicketService.CreateNewTicketTable:output_type -> CreateNewTicketTableResponse
	6,  // 16: HDTabTicketService.CreateTicket:output_type -> CreateTicketResponse
	4,  // 17: HDTabTicketService.GetTicket:output_type -> GetTicketResponse
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_ticket_proto_init() }
func file_ticket_proto_init() {
	if File_ticket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ticket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewTicketTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewTicketTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ticket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ticket_proto_goTypes,
		DependencyIndexes: file_ticket_proto_depIdxs,
		MessageInfos:      file_ticket_proto_msgTypes,
	}.Build()
	File_ticket_proto = out.File
	file_ticket_proto_rawDesc = nil
	file_ticket_proto_goTypes = nil
	file_ticket_proto_depIdxs = nil
}
